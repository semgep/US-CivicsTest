// #region Variables declare
let data = [],
  el = {},
  db,
  enVOICE = null,
  ruVOICE = null,
  selectedText = "",
  currentText = "",
  currentIndex = 0,
  currentSelected = null,
  currentCategory = null,
  currentSubCategory = null,
  playAllCurrentIndex = 0,
  playAllTimeoutId = null, // ID –¥–ª—è setTimeout, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
  currentSpeakingState,
  isPlayingAll = false; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º "–û–∑–≤—É—á–∏—Ç—å –≤—Å–µ"
const INTERVAL_BETWEEN_PHRASES_MS = 2000, // 2 —Å–µ–∫—É–Ω–¥
  nosort = ["–£—Ä–æ–∫–∏"],
  notrans = [],
  // classComm = {
  //   Common: " About everything in a little bit",
  //   –ö–∞–ª–µ–Ω–¥–∞—Ä—å: "All sorts of words about the seasons",
  //   –£—Ä–æ–∫–∏: "English lessons for expats",
  // },
  // GetCommRu = true,
  // DBname = "EnRu.db",
  currentRate = 0.8;
// #endregion

function speakText(text, rate, callback = null, pauseDuration = 0) {
  // speakTextPuter(text, rate, callback, pauseDuration);
  // return;
  if (!text) {
    if (callback) {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–æ –µ—Å—Ç—å –∫–æ–ª–±—ç–∫, –≤—ã–∑–æ–≤–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É
      setTimeout(() => callback(), pauseDuration);
    }
    return;
  }
  const lang = /[–∞-—è—ë–ê-–Ø–Å]/.test(text) ? "ru" : "en";
  const utterance = new SpeechSynthesisUtterance(text);
  // utterance.rate = rate;
  utterance.rate = lang === "ru" ? rate : rate - 0.2;
  utterance.onend = () => {
    // –í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞–µ–º callback –ø—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ—á–∏
    if (callback) {
      setTimeout(() => {
        callback();
      }, pauseDuration);
    }
  };
  utterance.onerror = (event) => {
    // –û–¢–ö–ê–¢: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º callback.
    // –†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –±—É–¥–µ—Ç –≤ playNextPhraseInSequence.
    if (event.error === "interrupted") {
      // console.log("onerror: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
      return;
    } else {
      console.error("onerror: –û—à–∏–±–∫–∞ SpeechSynthesisUtterance:", event);
      // }
      // –í–∞–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–ª–±—ç–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å,
      // –Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —Å –º–µ–Ω—å—à–µ–π –ø–∞—É–∑–æ–π, –∏–ª–∏ –±–µ–∑ –Ω–µ—ë, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞.
      if (callback) {
        setTimeout(() => {
          callback();
        }, pauseDuration); // –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å pauseDuration –Ω–∞ 0 –∑–¥–µ—Å—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
  };
  if (lang === "en") {
    if (enVOICE) {
      utterance.voice = enVOICE;
      utterance.lang = enVOICE.lang;
    } else {
      utterance.lang = "en-US";
      console.warn("ruVOICE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
    }
  } else {
    if (ruVOICE) {
      utterance.voice = ruVOICE;
      utterance.lang = ruVOICE.lang;
    } else {
      utterance.lang = "ru-RU";
      console.warn("ruVOICE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
    }
  }
  speechSynthesis.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  speechSynthesis.speak(utterance);
}
function selectPhrase(data, index, onPhraseCompleteCallback) {
  if (currentSelected) {
    currentSelected.classList.remove("selected");
  }
  currentSelected = data.element;
  currentSelected.classList.add("selected");
  currentIndex = index;
  currentText = data.textEn;
  el.selPhrase.innerHTML = currentText;
  el.selPhrase.title = data.rowid;
  el.textRU.title = data.rowid;
  el.textRU.innerHTML = data.textRu;
  if (!notrans.includes(currentCategory)) el.extra.textContent = data.trans;
  const commCtrlElement = document.getElementById("commCtrl");
  const commentsContainer = document.querySelector(".comments-container");
  if (data.comm) {
    el.comments.innerHTML = data.comm;
    el.comments.title = data.rowid;
    el.commCtrl.style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  } else {
    el.comments.innerHTML = "";
    el.commCtrl.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  }
  // if (false)
  speakEnAndRu(el.selPhrase.textContent, el.textRU.textContent, () => {
    // –≠—Ç–æ—Ç –∫–æ–ª–±—ç–∫ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ speakEnRu –∑–∞–≤–µ—Ä—à–∏—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π —Ñ—Ä–∞–∑—ã
    if (onPhraseCompleteCallback) {
      onPhraseCompleteCallback(); // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ selectPhrase
    }
  });
}
function speakEnAndRu(enText, ruText, onSpeechComplete) {
  speakText(
    enText,
    1,
    () => {
      speakText(
        ruText,
        1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ data.textRu
        () => {
          // –≠—Ç–æ—Ç –∫–æ–ª–±—ç–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –†–£–°–°–ö–û–ô —Ñ—Ä–∞–∑—ã
          // !!! –ó–¥–µ—Å—å –æ–±–µ —á–∞—Å—Ç–∏ —Ñ—Ä–∞–∑—ã –æ–∑–≤—É—á–µ–Ω—ã !!!
          if (onSpeechComplete) {
            onSpeechComplete(); // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫
          }
        },
        50 // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –∏ —Ä—É—Å—Å–∫–æ–π —Ñ—Ä–∞–∑–æ–π
      );
    },
    50 // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ñ—Ä–∞–∑–æ–π
  );
}
function speakEnOrRu(text, onComplete) {
  speakText(
    text,
    1, // –°–∫–æ—Ä–æ—Å—Ç—å
    // –≠—Ç–æ—Ç –∫–æ–ª–±—ç–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ speakText –∑–∞–≤–µ—Ä—à–∏—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
    () => {
      if (onComplete) {
        // –ï—Å–ª–∏ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–æ–ª–±—ç–∫
        onComplete(); // –í—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
      }
    },
    0 // –ü–∞—É–∑–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞, –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ–±—ã—á–Ω–æ 0)
  );
}
function playNextPhraseInSequence() {
  if (playAllCurrentIndex < data.length) {
    selectPhrase(data[playAllCurrentIndex], playAllCurrentIndex, () => {
      playAllTimeoutId = setTimeout(
        playNextPhraseInSequence,
        INTERVAL_BETWEEN_PHRASES_MS
      );
      playAllCurrentIndex++;
      if (playAllCurrentIndex == data.length) playAllCurrentIndex = 0;
    });
  }
}
function stopAllPlayback() {
  if (speechSynthesis.speaking) {
    speechSynthesis.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—É—é —Ç–µ–∫—É—â—É—é —Ä–µ—á—å
  }
  if (playAllTimeoutId) {
    clearTimeout(playAllTimeoutId); // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã PlayAll
    playAllTimeoutId = null; // –û–±–Ω—É–ª—è–µ–º ID
  }
  if (currentSelected) {
    currentSelected.classList.remove("selected"); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    currentSelected = null;
  }
  if (isPlayingAll) {
    isPlayingAll = false;
    playAllCurrentIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    updateButtonStates("topicSelected"); // <--- –¢–æ–ª—å–∫–æ playAll –∞–∫—Ç–∏–≤–Ω–∞
  } else {
    updateButtonStates("stopped"); // <--- playAll –∏ playBtn –∞–∫—Ç–∏–≤–Ω—ã
  }
  el.playAll.textContent = "üéß"; // –ó–Ω–∞—á–æ–∫ –∫–Ω–æ–ø–∫–∏ PlayAll
}
function updateButtonStates(state) {
  switch (state) {
    case "initial": // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏–ª–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞)
      el.playBtn.disabled = true;
      el.playAll.disabled = true;
      el.stopBtn.disabled = true;
      break;
    case "topicSelected": // –¢–æ–ø–∏–∫ –≤—ã–±—Ä–∞–Ω, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å "–û–∑–≤—É—á–∏—Ç—å –≤—Å–µ"
      el.playBtn.disabled = true;
      el.playAll.disabled = false; //  üéß
      el.stopBtn.disabled = true;
      break;
    case "playingAll": // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      el.playBtn.disabled = true;
      el.playAll.disabled = true;
      el.stopBtn.disabled = false; //  ‚èπÔ∏è
      break;
    case "playingSingle": // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ (—á–µ—Ä–µ–∑ playBtn –∏–ª–∏ –ø—Ä—è–º–æ–π –∫–ª–∏–∫)
      el.playBtn.disabled = true;
      el.playAll.disabled = true;
      el.stopBtn.disabled = false; //  ‚èπÔ∏è
      break;
    case "stopped": // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ) –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ñ—Ä–∞–∑—ã
      el.playBtn.disabled = false; //  ‚ñ∂Ô∏è
      el.playAll.disabled = false; //  üéß
      el.stopBtn.disabled = true;
      break;
    default:
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫:", state);
  }
}
async function selText(text) {
  const lang = /[–∞-—è—ë–ê-–Ø–Å]/.test(text) ? "ru" : "en";
  const translation = await fetchTranslation(
    text,
    lang,
    lang === "ru" ? "en" : "ru"
  );
  el.modalOriginalText.textContent = text;
  el.modalTranslationText.textContent = translation;
  el.translationModal.style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  speakEnAndRu(text, translation, () => {
    stopAllPlayback();
  });
}
function hideTranslationModal() {
  el.translationModal.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  el.modalOriginalText.textContent = "";
  el.modalTranslationText.textContent = ""; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
}
async function fetchTranslation(text, fromLang, toLang) {
  const encoded = encodeURIComponent(text);
  // console.log("text: ", text, text.length);
  // console.log("encoded: ", encoded);
  const url = `https://lingva.ml/api/v1/${fromLang}/${toLang}/${encoded}`;
  const response = await fetch(url);
  const data = await response.json();
  return data.translation;
}
async function testTranslationReliably(text) {
  const originalHtml = text;
  const translatedHtml = await translateHtmlPreserveBrOnly(
    originalHtml,
    "en",
    "ru"
  );
  // console.log("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML:", originalHtml);
  // console.log("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π HTML (—Ç–æ–ª—å–∫–æ p –∏ br):", translatedHtml);
  return translatedHtml; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π HTML
}
// async function translateHtmlPreserveBrOnly(htmlString, fromLang, toLang) {
//   // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö <br> —Ç–µ–≥–æ–≤.
//   const brRegex = /<br\s*\/?>/gi;

//   // 1. –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ <br> —Ç–µ–≥–∞–º.
//   const parts = htmlString.split(brRegex);

//   // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
//   const formattedParts = [];

//   // 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç.
//   for (let i = 0; i < parts.length; i++) {
//     const part = parts[i];
//     const tempDiv = document.createElement("div");
//     tempDiv.innerHTML = part;

//     // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
//     const formattingRegex = /^(&emsp;|‚òÖ|\s)+/i;
//     const formattingMatch = tempDiv.textContent.match(formattingRegex);

//     // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
//     const formatting = formattingMatch ? formattingMatch[0] : "";

//     // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
//     const plainText = tempDiv.textContent.replace(formattingRegex, "").trim();

//     // –ï—Å–ª–∏ –≤ —á–∞—Å—Ç–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ.
//     if (plainText.length > 0) {
//       const translatedText = await fetchTranslation(
//         plainText,
//         fromLang,
//         toLang
//       );
//       // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
//       formattedParts.push({ text: translatedText, formatting: formatting });
//     } else {
//       // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞), –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —á–∞—Å—Ç—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏.
//       formattedParts.push({ text: "", formatting: "" });
//     }
//   }

//   // 3. –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –æ–±—Ä–∞—Ç–Ω–æ –≤ HTML-—Å—Ç—Ä–æ–∫—É.
//   const pStyle = 'style="margin-top: 0; margin-bottom: 0;"';
//   const finalHtml = formattedParts
//     .map((part) => {
//       // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∞–±–∑–∞—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–≤—É—Ö <br>
//       if (part.text === "" && formattedParts.length > 1) {
//         return "";
//       }
//       return `<p ${pStyle}>${part.formatting}${part.text}</p>`;
//     })
//     .join("");

//   return finalHtml;
// }
async function translateHtmlPreserveBrOnly(htmlString, fromLang, toLang) {
  // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞, —Ç–µ–≥–∏ –∏ &emsp;.
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏—â–µ—Ç –ª–∏–±–æ &emsp;, –ª–∏–±–æ —Ç–µ–≥, –ª–∏–±–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
  const regex = /((?:&emsp;)+|<[^>]+>|[^<>&]+)/g;
  const parts = htmlString.match(regex);
  if (!parts) return "";

  // 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
  const translatedParts = [];
  for (const part of parts) {
    // –ï—Å–ª–∏ —ç—Ç–æ HTML-—Ç–µ–≥ –∏–ª–∏ &emsp;, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
    if (
      (part.startsWith("<") && part.endsWith(">")) ||
      part.startsWith("&emsp;")
    ) {
      translatedParts.push(part);
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ.
      if (part.trim().length > 0) {
        const translated = await fetchTranslation(part, fromLang, toLang);
        translatedParts.push(translated);
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞.
        translatedParts.push(part);
      }
      // const translated = await fetchTranslation(part, fromLang, toLang);
      // translatedParts.push(translated);
    }
  }

  // 3. –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
  return translatedParts.join("");
}
// async function translateHtmlPreserveBrOnly(htmlString, fromLang, toLang) {
//   // async function translateTextWithTags(htmlString, fromLang, toLang) {
//   // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–µ–≥–∏.
//   // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏—â–µ—Ç –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ HTML-—Ç–µ–≥.
//   // const regex = /     ([^<]+|<[^>]+>)/g;
//   // const regex = /(&emsp;|<[^>]+>|[^<>&]+)/g;
//   const regex = /(?:&emsp;)+|<[^>]+>|[^<>&]+/;
//   const parts = htmlString.match(regex);
//   if (!parts) return "";

//   // 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
//   const translatedParts = [];
//   for (const part of parts) {
//     if (part.startsWith("<") && part.endsWith(">")) {
//       // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å.
//       translatedParts.push(part);
//     } else {
//       // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ.
//       const translated = await fetchTranslation(part, fromLang, toLang);
//       translatedParts.push(translated);
//     }
//   }

//   // 3. –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
//   return translatedParts.join("");
// }
async function getIPA(text) {
  const ipaParts = [];
  const words = text.match(/[a-zA-Z0-9']+/g) || [];
  for (const word of words) {
    // console.log(`üü° [getIPA] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ª–æ–≤–∞: "${word}"`);
    if (!word) continue;

    let ipa = await fetchIPA_toDictAPI(word); // from dictionaryapi

    if (ipa && ipa !== "(–Ω–µ—Ç IPA)") {
      ipaParts.push(ipa);
    } else {
      ipa = await fetchIPA_toWebster(word); // from Merriam-Webster
      ipaParts.push(ipa);
    }
  }
  // console.log(`üü¢ [API 1] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${ipaParts.join(" ")}`);
  return ipaParts.join(" ");
}

async function fetchIPA_toDictAPI(word) {
  try {
    const url = `http://localhost:3001/api-dict-v2/${word}`;
    const response = await fetch(url);

    if (!response.ok) {
      // console.log(
      //   `üü† [API 1] API 1 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: ${response.status}`
      // );
      return "(–Ω–µ—Ç IPA)";
    }

    const phoneticText = await response.text();
    if (phoneticText && phoneticText !== "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") {
      // console.log(`üü¢ [API 1] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${phoneticText}`);
      return phoneticText;
    }

    return "(–Ω–µ—Ç IPA)";
  } catch (e) {
    // console.error(
    //   `üî¥ [API 1] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IPA –¥–ª—è —Å–ª–æ–≤–∞ "${word}":`,
    //   e
    // );
    return "(–Ω–µ—Ç IPA)";
  }
}

async function fetchIPA_toWebster(word) {
  try {
    const url = `http://localhost:3001/api-webster/${word}`;
    const response = await fetch(url);

    if (!response.ok) {
      // console.log(
      //   `üü† [API 2] API 2 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: ${response.status}`
      // );
      // return "(–Ω–µ—Ç IPA)";
      return `{${word}}`;
    }

    const phoneticText = await response.text();
    if (phoneticText && phoneticText !== "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") {
      // console.log(`üü¢ [API 2] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${phoneticText}`);
      return phoneticText;
    }
    return `{${word}}`;
    // return "(–Ω–µ—Ç IPA)";
  } catch (e) {
    // console.error(
    //   `üî¥ [API 2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IPA –¥–ª—è —Å–ª–æ–≤–∞ "${word}":`,
    //   e
    // );
    // return "(–Ω–µ—Ç IPA)";
    return `{${word}}`;
  }
}

// async function getIPA(text) {
//   const ipaParts = [];
//   const words = text.match(/[a-zA-Z0-9']+/g) || [];
//   for (const word of words) {
//     console.log(`üü° [getIPA] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ª–æ–≤–∞: "${word}"`);
//     if (!word) continue;
//     try {
//       ipa = await fetchIPA_toDictAPI(word); // from dictionaryapi
//       if (ipa) ipaParts.push(ipa);
//       else {
//         ipa = await fetchIPA_toWebster(word); // from Merriam-Webster
//         ipaParts.push(ipa);
//       }
//     } catch (error) {
//       console.error(
//         `üî¥ [getIPA] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IPA –¥–ª—è —Å–ª–æ–≤–∞ "${word}":`,
//         error
//       );
//       return "(–Ω–µ—Ç IPA)";
//     }
//   }
//   return ipaParts.join(" ");
// }
// async function fetchIPA_toDictAPI(word) {
//   // –ø–æ–ª—É—á–µ–Ω–∏–µ IPA –∏–∑ https://api.dictionaryapi.dev
//   try {
//     const url1 = `http://localhost:3001/api-dict-v2/${word}`;
//     console.log(`üü° [getIPA] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ª–æ–≤–∞: "${word}"`);
//     const response = await fetch(url1);
//     // const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(
//     //   word
//     // )}`;
//     // const response = await fetch(url);
//     //
//     if (response.ok) {
//       // const ipa = await response1.text();
//       console.log(`üü¢ [getIPA] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç API 1: ${ipa}`);
//     } else {
//       console.log(
//         `üü† [getIPA] API 1 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: ${response1.status}`
//       );

//       // return ipa;
//     }
//     const phoneticText = await response.text();
//     if (
//       response.ok &&
//       phoneticText &&
//       phoneticText !== "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
//     ) {
//       return phoneticText;
//     }
//   } catch (e) {
//     // –≠—Ç–æ—Ç –±–ª–æ–∫ catch –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON,
//     // –Ω–æ –Ω–µ HTTP-–æ—à–∏–±–∫–∏ —Ç–∏–ø–∞ 404, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ.
//     console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IPA –¥–ª—è —Å–ª–æ–≤–∞ "${word}":`, e);
//     return ``; // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π
//   }
// }
// async function fetchIPA_toWebster(word) {
//   try {
//     const url2 = `http://localhost:3001/api-webster/${word}`;
//     console.log(`üü¢ [getIPA] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç API 2: ${ipa}`);
//     const response = await fetch(url2);
//     // ‚úÖ –ú–µ–Ω—è–µ–º response.json() –Ω–∞ response.text()
//     const phoneticText = await response.text();
//     if (response.ok) {
//       // const ipa = await response2.text();
//       console.log(`üü¢ [getIPA] –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç API 2: ${ipa}`);
//       // return ipa;
//     } else {
//       console.log(
//         `üü† [getIPA] API 2 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: ${response.status}`
//       );
//     }
//     if (
//       response.ok &&
//       phoneticText &&
//       phoneticText !== "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
//     ) {
//       // –ó–¥–µ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,
//       // —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
//       return phoneticText;
//     } else {
//       return `{${word}}`;
//     }
//   } catch (e) {
//     console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IPA –¥–ª—è —Å–ª–æ–≤–∞ "${word}":`, e);
//     return ``; // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π
//   }
// }

// async function fetchIPA_toWebster(word) {
//   // –ø–æ–ª—É—á–µ–Ω–∏–µ IPA –∏–∑ MERRIAM-WEBSTER
//   const MERRIAM_WEBSTER_DICT_API_KEY = "589c5d87-e46a-47d4-a001-67f0c69887d0";
//   const MERRIAM_WEBSTER_LEARNER_API_KEY =
//     "2037d3ef-c1a9-4f73-9ab9-ada713d775b8";
//   try {
//     const response = await fetch(`http://localhost:3001/api-webster/${word}`);
//     // const url = `https://www.dictionaryapi.com/api/v3/references/collegiate/json/${encodeURIComponent(
//     //   word
//     // )}?key=${MERRIAM_WEBSTER_DICT_API_KEY}`;
//     // const response = await fetch(url);
//     const data = await response.json();
//     let phoneticText = "";

//     if (Array.isArray(data) && data.length > 0) {
//       const firstEntry = data[0];
//       if (
//         firstEntry.hwi &&
//         Array.isArray(firstEntry.hwi.prs) &&
//         firstEntry.hwi.prs.length > 0
//       ) {
//         phoneticText = firstEntry.hwi.prs[0].ipa || firstEntry.hwi.prs[0].mw;
//       } else if (Array.isArray(firstEntry.prs) && firstEntry.prs.length > 0) {
//         phoneticText = firstEntry.prs[0].ipa || firstEntry.prs[0].mw;
//       }
//     }
//     if (phoneticText) {
//       return `(${phoneticText})`;
//     } else {
//       return `{${word}}`;
//     }
//   } catch (e) {
//     console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IPA –¥–ª—è —Å–ª–æ–≤–∞ "${word}":`, e);
//     return ``; // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π
//     // return `(‚ùå${word}‚ùå)`; // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π
//   }
// }

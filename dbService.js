let DBname = "CivicsTest.db";
let parmDb = {};
let isDirty = false; // –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

async function cleanDB() {
  db.run("DELETE   FROM words;");
  console.log("–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.");
}
async function readDB(category, topic) {
  if (category == undefined)
    return db.exec("SELECT DISTINCT class FROM words ORDER BY class;");
  else if (topic == undefined)
    return db.exec(
      "SELECT DISTINCT topic FROM words WHERE class = ? ORDER BY ROWID ASC;",
      [category]
    );
  else if (DBname === "CivicsTest.db")
    return db.exec(
      "SELECT ROWID, * FROM words WHERE class = ? AND topic=? ORDER BY CAST(textEn AS INTEGER) ASC;",
      [category, topic]
    );
  else
    return db.exec(
      "SELECT ROWID, * FROM words WHERE class = ? AND topic=? ORDER BY ROWID ASC;",
      [category, topic]
    );
}
async function readDBbyID(rowId) {
  // const readAllById = "SELECT * FROM words WHERE ROWID = ?;";
  return db.exec("SELECT * FROM words WHERE ROWID = ?;", [rowId]);
}
async function loadDB() {
  // DBname = location.hash.replace(/^#db=/, "");
  if (!DBname) print("–ö–∞–∫–∞—è –ë–î ???");
  else {
    const SQL = await initSqlJs({
      locateFile: (DBname) =>
        `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.10.3/${DBname}`,
    });
    // const URL = `http://localhost:3001/db/${DBname}`;
    // const URL = `./db/${DBname}`;  //  –¥–ª—è GitHub
    const URL = `${DBname}`; //  –¥–ª—è GitHub
    const response = await fetch(URL, { cache: "no-store" });
    if (!response.ok) {
      console.error(
        `üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`
      );
      return;
    }
    const buffer = await response.arrayBuffer();
    db = new SQL.Database(new Uint8Array(buffer));
    print(`–ë–∞–∑–∞ "${DBname}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.`, "All Right!!!");
  }
}
async function saveDB() {
  // ‚úÖ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–¥–µ—Å—å
  if (DBname === "CivicsTest.db") folderPath = "D:/Sam/Site/MyUSAcitizen";
  else folderPath = "D:/Sam/Site/USAcitizen";

  try {
    const binary = db.export();

    const response = await fetch("http://localhost:3001/save-db", {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        "X-Filename": DBname,
        "X-Folder-Path": folderPath, // ‚úÖ –¢–µ–ø–µ—Ä—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
      },
      body: binary,
    });

    if (response.ok) {
      console.log(`–ë–∞–∑–∞ "${DBname}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
    } else {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${response.statusText}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ë–î "${DBname}"`, error);
  }
}
async function writeDB(parmDb) {
  const queryInsert = "INSERT INTO words";
  const keys = Object.keys(parmDb);
  const placeHolders = "?,".repeat(keys.length).slice(0, -1);
  const queryDb = `${queryInsert} (${keys.toString()}) VALUES (${placeHolders})`;
  try {
    await db.run(queryDb, Object.values(parmDb)); // Insert DB
    const lastID = db.exec("SELECT last_insert_rowid();")[0].values[0][0]; // select DB
    console.log(
      `${lastID}: ${parmDb["class"]} ‚Üí ${parmDb["topic"]} ‚Üí ${parmDb[
        "textEn"
      ].substr(0, 32)}`
    );
    return true;
  } catch (e) {
    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    if (e.message.includes("UNIQUE constraint failed")) {
      console.warn(
        "–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é:",
        `${parmDb["textEn"].substr(0, 32)}`
      );
      // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –µ—ë –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∑–∞–ø–∏—Å–∏:", e);
      // –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–∏–∫–ª –ø—Ä–∏ –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ
    }
    return false;
  }
  // isDirty = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ë–î –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
}
async function updateDB(rowId, parmDb) {
  const queryUpdate = "UPDATE words SET ";
  const keys = [];
  const values = [];
  for (let key in parmDb) {
    keys.push(`${key} = ?`);
    values.push(parmDb[key]);
  }
  values.push(rowId);
  const queryDb = `${queryUpdate} ${keys.toString()} WHERE ROWID =?`;
  try {
    await db.run(queryDb, values); // Insert DB
    console.log(`–ó–∞–ø–∏—Å—å ${rowId} –∏–∑–º–µ–Ω–µ–Ω–∞`);
    return true;
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", e);
    return false;
  }
  // isDirty = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ë–î –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
}
function createInd() {
  // db.run("DROP INDEX IF EXISTS idx_class_topic;");
  // db.run("CREATE INDEX idx_class ON words(class);");
  // db.run("CREATE  INDEX idx_topic ON words(topic);");
  // db.run(
  //   "CREATE UNIQUE INDEX IF NOT EXISTS idx_class_topic_en ON words(class, topic, textEn);"
  // );
  let res = db.exec("PRAGMA index_list(words);");
  if (res.length === 0) {
    console.log("‚õîÔ∏è –ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
  } else {
    console.log(res[0].values);
  }
}

function print(...text) {
  function getCaller() {
    const errLine = new Error().stack.split("\n")[3].trim();
    const regex = /([^\/]+:\d+)/;
    const match = errLine.match(regex);
    if (match) return `(${match[1].split(":", 2).join(":")})`;
    else return callerLine;
  }
  const timesmp = new Date().toLocaleTimeString("en-US", { hour12: false });
  console.log(`%c${timesmp} ${getCaller()}`, "color: blue;", ...text);
}
